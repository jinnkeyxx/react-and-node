{"ast":null,"code":"import axios from 'axios';\nimport { url } from './Url';\nimport jwt from 'jsonwebtoken';\nconst KEY_JWT = \"appchat@\";\nexport const sendPostData = async (path, data) => {\n  let result;\n  const response = await axios({\n    url: `${url}/${path}`,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'JWT fefege'\n    },\n    data: data\n  }).then(e => {\n    result = e;\n  }).catch(e => {\n    result = e;\n  });\n  return result.data;\n};\nexport const saveToken = token => {\n  if (token !== undefined && token !== null && token !== \"\") {\n    localStorage.setItem('token', JSON.stringify(token));\n  }\n};\nexport const isLogin = () => {\n  const user = getToken();\n\n  if (user !== undefined && user !== null && user !== \"\") {\n    return true;\n  }\n\n  return false;\n};\nexport const removeToken = () => {\n  localStorage.removeItem('token');\n};\nexport const getToken = () => {\n  return localStorage.getItem('token');\n};\nexport const decodeToke = () => {\n  const token = getToken();\n  let decode = null;\n\n  if (token !== undefined && token !== null && token !== \"\") {\n    decode = jwt.verify(JSON.parse(token), KEY_JWT);\n  }\n\n  return decode;\n};\nexport const getUsername = () => {\n  const infoUser = decodeToke();\n  let username = null;\n\n  if (infoUser !== null) {\n    username = infoUser.username;\n  }\n\n  return username;\n};\nexport const getRole = () => {\n  const infoUser = decodeToke();\n  let role = null;\n\n  if (infoUser !== null) {\n    role = infoUser.role;\n  }\n\n  return role;\n};","map":{"version":3,"sources":["D:/lập trình/nodejs/react-and-node/client/src/appchat@/Service/apiHelper.jsx"],"names":["axios","url","jwt","KEY_JWT","sendPostData","path","data","result","response","method","headers","then","e","catch","saveToken","token","undefined","localStorage","setItem","JSON","stringify","isLogin","user","getToken","removeToken","removeItem","getItem","decodeToke","decode","verify","parse","getUsername","infoUser","username","getRole","role"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,MAAMC,OAAO,GAAG,UAAhB;AACA,OAAO,MAAMC,YAAY,GAAG,OAAOC,IAAP,EAAcC,IAAd,KAAuB;AAC/C,MAAIC,MAAJ;AACA,QAAMC,QAAQ,GAAG,MAAMR,KAAK,CAAC;AACzBC,IAAAA,GAAG,EAAI,GAAEA,GAAI,IAAGI,IAAK,EADI;AAEzBI,IAAAA,MAAM,EAAG,MAFgB;AAGzBC,IAAAA,OAAO,EAAG;AACN,sBAAgB,kBADV;AAEN,uBAAiB;AAFX,KAHe;AAOzBJ,IAAAA,IAAI,EAAGA;AAPkB,GAAD,CAAL,CAQpBK,IARoB,CAQdC,CAAD,IAAO;AACXL,IAAAA,MAAM,GAAGK,CAAT;AACH,GAVsB,EAUpBC,KAVoB,CAUbD,CAAD,IAAO;AACZL,IAAAA,MAAM,GAAGK,CAAT;AACH,GAZsB,CAAvB;AAaA,SAAOL,MAAM,CAACD,IAAd;AACH,CAhBM;AAkBP,OAAO,MAAMQ,SAAS,GAAIC,KAAD,IAAW;AAChC,MAAGA,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,IAAjC,IAAyCA,KAAK,KAAK,EAAtD,EAAyD;AACrDE,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA+BC,IAAI,CAACC,SAAL,CAAeL,KAAf,CAA/B;AACH;AACJ,CAJM;AAKP,OAAO,MAAMM,OAAO,GAAG,MAAM;AACzB,QAAMC,IAAI,GAAGC,QAAQ,EAArB;;AACA,MAAGD,IAAI,KAAKN,SAAT,IAAsBM,IAAI,KAAK,IAA/B,IAAuCA,IAAI,KAAK,EAAnD,EAAsD;AAClD,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH,CANM;AAOP,OAAO,MAAME,WAAW,GAAG,MAAK;AAC5BP,EAAAA,YAAY,CAACQ,UAAb,CAAwB,OAAxB;AACH,CAFM;AAGP,OAAO,MAAMF,QAAQ,GAAG,MAAM;AAC3B,SAAON,YAAY,CAACS,OAAb,CAAqB,OAArB,CAAP;AACF,CAFM;AAGP,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC5B,QAAMZ,KAAK,GAAGQ,QAAQ,EAAtB;AACA,MAAIK,MAAM,GAAG,IAAb;;AACA,MAAGb,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,IAAjC,IAAyCA,KAAK,KAAK,EAAtD,EAAyD;AACrDa,IAAAA,MAAM,GAAG1B,GAAG,CAAC2B,MAAJ,CAAWV,IAAI,CAACW,KAAL,CAAWf,KAAX,CAAX,EAA+BZ,OAA/B,CAAT;AACH;;AACD,SAAOyB,MAAP;AACH,CAPM;AAQP,OAAO,MAAMG,WAAW,GAAG,MAAM;AAC7B,QAAMC,QAAQ,GAAGL,UAAU,EAA3B;AACA,MAAIM,QAAQ,GAAG,IAAf;;AACA,MAAGD,QAAQ,KAAK,IAAhB,EAAqB;AACjBC,IAAAA,QAAQ,GAAGD,QAAQ,CAACC,QAApB;AACH;;AACD,SAAOA,QAAP;AACH,CAPM;AAQP,OAAO,MAAOC,OAAO,GAAG,MAAM;AAC1B,QAAMF,QAAQ,GAAGL,UAAU,EAA3B;AACA,MAAIQ,IAAI,GAAG,IAAX;;AACA,MAAGH,QAAQ,KAAK,IAAhB,EAAqB;AACjBG,IAAAA,IAAI,GAAGH,QAAQ,CAACG,IAAhB;AACH;;AACD,SAAOA,IAAP;AACH,CAPM","sourcesContent":["import axios from 'axios'\r\nimport { url } from './Url'\r\nimport jwt from 'jsonwebtoken'\r\nconst KEY_JWT = \"appchat@\"\r\nexport const sendPostData = async (path , data) => {\r\n    let result\r\n    const response = await axios({\r\n        url : `${url}/${path}`,\r\n        method : 'POST',\r\n        headers : {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'JWT fefege'\r\n        },\r\n        data : data\r\n    }).then((e) => {\r\n        result = e\r\n    }).catch((e) => {\r\n        result = e\r\n    })\r\n    return result.data\r\n}\r\n\r\nexport const saveToken = (token) => {\r\n    if(token !== undefined && token !== null && token !== \"\"){\r\n        localStorage.setItem('token' , JSON.stringify(token))\r\n    }\r\n}\r\nexport const isLogin = () => {\r\n    const user = getToken()\r\n    if(user !== undefined && user !== null && user !== \"\"){\r\n        return true\r\n    }\r\n    return false\r\n}\r\nexport const removeToken = () =>{\r\n    localStorage.removeItem('token')\r\n}\r\nexport const getToken = () => {\r\n   return localStorage.getItem('token')\r\n}\r\nexport const decodeToke = () => {\r\n    const token = getToken()\r\n    let decode = null\r\n    if(token !== undefined && token !== null && token !== \"\"){\r\n        decode = jwt.verify(JSON.parse(token) , KEY_JWT)\r\n    }\r\n    return decode\r\n}\r\nexport const getUsername = () => {\r\n    const infoUser = decodeToke()\r\n    let username = null\r\n    if(infoUser !== null){\r\n        username = infoUser.username\r\n    }\r\n    return username\r\n}\r\nexport const  getRole = () => {\r\n    const infoUser = decodeToke()\r\n    let role = null\r\n    if(infoUser !== null){\r\n        role = infoUser.role\r\n    }\r\n    return role\r\n}\r\n"]},"metadata":{},"sourceType":"module"}